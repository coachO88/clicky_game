{"version":3,"sources":["clicky.js","Components/rotate/rotate.js","App.js","serviceWorker.js","index.js"],"names":["Clicky","react_default","a","createElement","className","id","this","props","points","React","Component","Rotate","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","pics","imagelink","map","images","index","onClick","random","key","guess","src","alt","App","imgScr","console","log","i","clicked","length","setState","window","alert","push","event","copy","slice","randomized","Math","floor","split","splice","clicky","rotate","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17edff8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Clicky extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Clicky\" >\r\n        <h2 className=\"mainHeader\">Californication Memory Game</h2>\r\n        <div id=\"score\">\r\n            Score: {this.props.points}\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Clicky;","import React from 'react';\r\n\r\nclass Rotate extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  };\r\n\r\n  render() {\r\n    var pics = this.props.imagelink.map((images, index) => {\r\n      return (<div onClick={() => \r\n        this.props.random()} className=\"grid-item\" key={index}><img onClick={() => \r\n            this.props.guess(images)} src={images} alt=\"friend\" /></div>)\r\n    })\r\n    return (\r\n      <div className=\"tiles\">\r\n        {pics}\r\n      </div>\r\n    );\r\n    ;\r\n  }\r\n};\r\n\r\nexport default Rotate;","import React, {Component}from 'react';\nimport './App.css';\nimport Clicky from './clicky';\nimport Rotate from './Components/rotate/rotate' ;\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n      this.state = {\n        imagelink: [\n          '../hank.jpg',\n          '../karen.jpg',\n          '../becca.jpg',\n          '../levon.jpg',\n          '../charlie.jpg',\n          '../marcy.jpg',\n          '../atticus.jpg',\n          '../eddie.jpg',\n          '../lew.jpg',\n          '../mia.jpg',\n          '../samurai.jpg',\n          '../stu.jpg',\n          '../sasha.jpg',\n          '../julia.jpg',\n          '../richard.jpg',\n          '../faith.jpg'\n        ],\n        clicked:[],\n        points: 0\n      };\n    };\n\n    guess = (imgScr) => {\n      console.log(imgScr);\n        for (let i = 0; i < this.state.clicked.length; i++){\n          if (this.state.clicked[i] !== imgScr) {\n            this.setState({points: this.state.points + 1});\n\n          }else{\n            window.alert(\"Game Over!!\")\n            this.setState({points: 0});\n            this.setState({clicked: []});\n            console.log(this.state.clicked)\n          }\n        }\n\n        if (this.state.points === 10){\n          window.alert(\"Winner!!\");\n          this.setState({points: 0 });\n          this.setState({clicked: []});\n        }\n        this.state.clicked.push(imgScr);\n        console.log(this.state.clicked)\n    };\n\n    random = (event) => {\n\n      var random = [];\n      var copy = this.state.imagelink.slice();\n        while (copy.length > 0) {\n          let randomized = Math.floor(Math.random() * copy.length);\n          let split = copy.splice(randomized, 1)[0];\n          random.push(split);\n        }\n\n        this.setState({imagelink: random});\n    }\n\n    render(){\n\n      return(\n        <div className = \"App\">\n          <header className = \"grid-container App-header\">\n          <div className = \"menu\"><Clicky points = {this.state.points}/></div>\n\n          <Rotate guess = {this.guess} random = {this.random} imagelink = {this.state.imagelink}/>\n          \n          </header>\n        </div>\n      );\n    }\n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}